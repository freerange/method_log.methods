    def on_defs(node)
      definee_node, name, args_node, body_node = *node
      case definee_node.type
      when :self
        scope = @scope.singleton
      when :const
        constants = process_const(definee_node)
        scope = @scope
        constants.each do |c|
          scope = scope.lookup(c)
        end
        scope = scope.singleton
      else
        raise
      end
      expression = node.location.expression
      first_line = expression.line - 1
      last_line = expression.source_buffer.decompose_position(expression.end_pos).first - 1
      lines = first_line..last_line
      definition = MethodDefinition.new(source_file: @source_file, lines: lines)
      identifier = scope.method_identifier(name)
      @methods[identifier] = definition
      super
    end