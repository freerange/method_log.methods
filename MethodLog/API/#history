    def history(method_identifier, max_count: nil)
      method_name = method_identifier.split(Regexp.union('#', '.')).last
      Enumerator.new do |yielder|
        last_method_commit = nil
        @repository.commits(max_count: max_count).each do |commit|
          last_source_file = last_method_commit && last_method_commit.method_definition && last_method_commit.method_definition.source_file
          if last_source_file && commit.contains?(last_source_file)
            last_method_commit = MethodCommit.new(commit: commit, method_definition: last_method_commit.method_definition)
          else
            source_files = commit.source_files.select { |sf| sf.source[Regexp.new(method_name)] }
            method_definition = nil
            source_files.map { |sf| MethodFinder.new(source_file: sf) }.each do |method_finder|
              break if method_definition = method_finder.find(method_identifier)
            end
            yielder << last_method_commit if last_method_commit
            last_method_commit = MethodCommit.new(commit: commit, method_definition: method_definition)
            yielder << last_method_commit
          end
        end
      end
    end